diff -Nurb old/shell.c new/shell.c
--- old/shell.c	2023-05-17 01:45:23.000000000 +1200
+++ new/shell.c	2023-06-08 20:56:42.337085100 +1200
@@ -757,9 +757,9 @@
 # endif
   ){
     char *z1 = sqlite3_vmprintf(zFormat, ap);
-    char *z2 = sqlite3_win32_utf8_to_mbcs_v2(z1, 0);
+    LPWSTR z2 = sqlite3_win32_utf8_to_unicode(z1);
     sqlite3_free(z1);
-    fputs(z2, out);
+    WriteConsoleW((HANDLE)_get_osfhandle(_fileno(out)), z2, (DWORD)wcslen(z2), NULL, NULL);
     sqlite3_free(z2);
   }else{
     vfprintf(out, zFormat, ap);
@@ -931,6 +931,61 @@
 }
 
 /*
+** This subroutine is called from local_getline to handle unicode on win32.
+*/
+static char *local_getline_interactive_win32(char *zLine){
+  int nLine = zLine==0 ? 0 : 100;
+  int n = 0;
+  WCHAR* wzLine = (WCHAR*)zLine;
+  DWORD r;
+  char* zTrans;
+
+  while( 1 ){
+    if( n+100>nLine ){
+      nLine = nLine*2 + 100;
+      wzLine = realloc(wzLine, nLine*2);
+      shell_check_oom(wzLine);
+    }
+    r = 0;
+    if( !ReadConsoleW(GetStdHandle(STD_INPUT_HANDLE), &wzLine[n], nLine - n, &r, NULL) ){
+      r = 0;
+    }
+    if( r==0 ){
+      if( n==0 ){
+        free(wzLine);
+        return 0;
+      }
+      wzLine[n] = 0;
+      break;
+    } else {
+      wzLine[r] = 0;
+    }
+    while( wzLine[n] ) n++;
+    if( n>0 && wzLine[n-1]=='\n' ){
+      n--;
+      if( n>0 && wzLine[n-1]=='\r' ) n--;
+      wzLine[n] = 0;
+      break;
+    }
+  }
+
+  zLine = (char*)wzLine;
+  zTrans = sqlite3_win32_unicode_to_utf8(wzLine);
+  if( zTrans ){
+    i64 nTrans = strlen(zTrans)+1;
+    if( nTrans>nLine*2 ){
+      zLine = realloc(zLine, nTrans);
+      shell_check_oom(zLine);
+    }
+    memcpy(zLine, zTrans, nTrans);
+    sqlite3_free(zTrans);
+  } else {
+    *zLine = 0;
+  }
+  return zLine;
+}
+
+/*
 ** This routine reads a line of text from FILE in, stores
 ** the text in memory obtained from malloc() and returns a pointer
 ** to the text.  NULL is returned at end of file, or if malloc()
@@ -943,6 +998,18 @@
   int nLine = zLine==0 ? 0 : 100;
   int n = 0;
 
+#if defined(_WIN32) || defined(WIN32)
+  /* For interactive input on Windows systems, without -utf8,
+  ** translate the multi-byte characterset characters into UTF-8.
+  ** This is the translation that predates the -utf8 option. */
+  if( stdin_is_interactive && in==stdin
+# if SHELL_WIN_UTF8_OPT
+      && !console_utf8
+# endif /* SHELL_WIN_UTF8_OPT */
+  ){
+    return local_getline_interactive_win32(zLine);
+  }
+#endif /* defined(_WIN32) || defined(WIN32) */
   while( 1 ){
     if( n+100>nLine ){
       nLine = nLine*2 + 100;
@@ -965,27 +1032,6 @@
       break;
     }
   }
-#if defined(_WIN32) || defined(WIN32)
-  /* For interactive input on Windows systems, without -utf8,
-  ** translate the multi-byte characterset characters into UTF-8.
-  ** This is the translation that predates the -utf8 option. */
-  if( stdin_is_interactive && in==stdin
-# if SHELL_WIN_UTF8_OPT
-      && !console_utf8
-# endif /* SHELL_WIN_UTF8_OPT */
-  ){
-    char *zTrans = sqlite3_win32_mbcs_to_utf8_v2(zLine, 0);
-    if( zTrans ){
-      i64 nTrans = strlen(zTrans)+1;
-      if( nTrans>nLine ){
-        zLine = realloc(zLine, nTrans);
-        shell_check_oom(zLine);
-      }
-      memcpy(zLine, zTrans, nTrans);
-      sqlite3_free(zTrans);
-    }
-  }
-#endif /* defined(_WIN32) || defined(WIN32) */
   return zLine;
 }
 
