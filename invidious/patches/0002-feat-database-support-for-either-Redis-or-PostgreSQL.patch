From 4760e9669eb57fc2755abb3667baa2282500aabe Mon Sep 17 00:00:00 2001
From: Fijxu <fijxu@nadeko.net>
Date: Tue, 18 Feb 2025 18:11:05 -0300
Subject: [PATCH 2/4] feat(database): support for either Redis or PostgreSQL
 for video cache

---
 src/invidious.cr                 | 19 ++++---
 src/invidious/database/videos.cr | 88 +++++++++++++++++++++-----------
 2 files changed, 72 insertions(+), 35 deletions(-)

diff --git a/src/invidious.cr b/src/invidious.cr
index bc65a8b9..a18cea7d 100644
--- a/src/invidious.cr
+++ b/src/invidious.cr
@@ -68,12 +68,6 @@ rescue ex
   puts "Check your 'config.yml' database settings or PostgreSQL settings."
   exit(1)
 end
-
-REDIS_DB = Redis::PooledClient.new(unixsocket: CONFIG.redis_socket || nil, url: CONFIG.redis_url || nil)
-
-if REDIS_DB.ping
-  puts "Connected to redis"
-end
 ARCHIVE_URL = URI.parse("https://archive.org")
 PUBSUB_URL  = URI.parse("https://pubsubhubbub.appspot.com")
 REDDIT_URL  = URI.parse("https://www.reddit.com")
@@ -151,6 +145,19 @@ end
 OUTPUT = CONFIG.output.upcase == "STDOUT" ? STDOUT : File.open(CONFIG.output, mode: "a")
 LOGGER = Invidious::LogHandler.new(OUTPUT, CONFIG.log_level, CONFIG.colorize_logs)
 
+REDIS_DB = begin
+  LOGGER.info "Connecting to Redis compatible DB"
+  redis = Redis::PooledClient.new(unixsocket: CONFIG.redis_socket || nil, url: CONFIG.redis_url || nil)
+  if redis.ping
+    LOGGER.info "Connected to Redis compatible DB via unix domain socket at '#{CONFIG.redis_socket}'" if CONFIG.redis_socket
+    LOGGER.info "Connected to Redis compatible DB via TCP socket at '#{CONFIG.redis_url}'" if CONFIG.redis_url
+  end
+  redis
+rescue ex
+  LOGGER.error "Failed to connect to a Redis compatible DB. Invidious will store the video cache on the PostgresSQL DB"
+  nil
+end
+
 # Check table integrity
 Invidious::Database.check_integrity(CONFIG)
 
diff --git a/src/invidious/database/videos.cr b/src/invidious/database/videos.cr
index 776ef5b1..64d18068 100644
--- a/src/invidious/database/videos.cr
+++ b/src/invidious/database/videos.cr
@@ -1,27 +1,70 @@
 require "./base.cr"
 
 module Invidious::Database::Videos
+  module DBCache
+    extend self
+
+    def set(video : Video, expire_time)
+      if redis = REDIS_DB
+        redis.set(video.id, video.info.to_json, expire_time)
+        redis.set(video.id + ":time", video.updated, expire_time)
+      else
+        request = <<-SQL
+          INSERT INTO videos
+          VALUES ($1, $2, $3)
+          ON CONFLICT (id) DO NOTHING
+        SQL
+
+        PG_DB.exec(request, video.id, video.info.to_json, video.updated)
+      end
+    end
+
+    def del(id : String)
+      if redis = REDIS_DB
+        redis.del(id)
+        redis.del(id + ":time")
+      else
+        request = <<-SQL
+          DELETE FROM videos *
+          WHERE id = $1
+        SQL
+
+        PG_DB.exec(request, id)
+      end
+    end
+
+    def get(id : String)
+      if redis = REDIS_DB
+        info = redis.get(id)
+        time = redis.get(id + ":time")
+        if info && time
+          return Video.new({
+            id:      id,
+            info:    JSON.parse(info).as_h,
+            updated: Time.parse(time, "%Y-%m-%d %H:%M:%S %z", Time::Location::UTC),
+          })
+        else
+          return nil
+        end
+      else
+        request = <<-SQL
+          SELECT * FROM videos
+          WHERE id = $1
+        SQL
+
+        return PG_DB.query_one?(request, id, as: Video)
+      end
+    end
+  end
+
   extend self
 
   def insert(video : Video)
-    request = <<-SQL
-      INSERT INTO videos
-      VALUES ($1, $2, $3)
-      ON CONFLICT (id) DO NOTHING
-    SQL
-
-    REDIS_DB.set(video.id, video.info.to_json, ex: 3600)
-    REDIS_DB.set(video.id + ":time", video.updated, ex: 3600)
+    DBCache.set(video: video, expire_time: 14400)
   end
 
   def delete(id)
-    request = <<-SQL
-      DELETE FROM videos *
-      WHERE id = $1
-    SQL
-
-    REDIS_DB.del(id)
-    REDIS_DB.del(id + ":time")
+    DBCache.del(id)
   end
 
   def delete_expired
@@ -44,19 +87,6 @@ module Invidious::Database::Videos
   end
 
   def select(id : String) : Video?
-    request = <<-SQL
-      SELECT * FROM videos
-      WHERE id = $1
-    SQL
-
-    if ((info = REDIS_DB.get(id)) && (time = REDIS_DB.get(id + ":time")))
-      return Video.new({
-        id:      id,
-        info:    JSON.parse(info).as_h,
-        updated: Time.parse(time, "%Y-%m-%d %H:%M:%S %z", Time::Location::UTC),
-      })
-    else
-      return nil
-    end
+    return DBCache.get(id)
   end
 end
-- 
2.51.0

