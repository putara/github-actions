name: Build invidious
on:
  workflow_dispatch:
  push:
    branches: ["main", "dev", "test"]
    paths:
      - '.github/workflows/invidious.yml'
      - 'invidious/**'
  schedule:
    - cron: "5 5 * * 2,5"

jobs:
  prep:
    outputs:
      invidious-rev: ${{ steps.latest.outputs.invidious-rev }}
      invidious-timestamp: ${{ steps.latest.outputs.invidious-timestamp }}
    name: Preparation
    runs-on: ubuntu-latest

    steps:
      - name: Get the latest commit
        id: latest
        run: |
          rev=$(git ls-remote -h https://github.com/iv-org/invidious.git master | cut -f 1)
          echo "invidious-rev=$rev" >> "$GITHUB_OUTPUT"
          echo "invidious-timestamp=$(TZ=Pacific/Auckland date +%Y%m%d)" >> "$GITHUB_OUTPUT"

  build:
    # amd/arm build inspired by https://github.com/iv-org/invidious/blob/master/.github/workflows/ci.yml
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: AMD64
            prefix: amd64
            platform: linux/amd64
            dockerfile: Dockerfile
            latest: latest
          - os: ubuntu-24.04-arm
            name: ARM64
            prefix: arm64
            platform: linux/arm64/v8
            dockerfile: Dockerfile.arm64
            latest: latest-arm64
    name: Build for ${{ matrix.name }}
    needs: prep
    env:
      INVIDIOUS_REV: ${{ needs.prep.outputs.invidious-rev }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Restore last build info
        if: github.ref_name == 'main' && github.event_name == 'schedule'
        uses: actions/cache@v3
        with:
          path: /tmp/GAC/invidious
          key: ${{ runner.os }}--invidious
      - name: Check last build info
        id: check
        run: |
          tag_file=/tmp/GAC/invidious/tag
          last_tag=$(cat "$tag_file" 2>/dev/null || echo -n)
          if [[ "$last_tag" != "$INVIDIOUS_REV" ]]; then
            mkdir -p "${tag_file%/*}"
            echo "$INVIDIOUS_REV" > "$tag_file"
          else
            echo 'skip-release=true' >> "$GITHUB_OUTPUT"
          fi
      - name: Set branch
        if: steps.check.outputs.skip-release != 'true'
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "branch=invidious" >> $GITHUB_ENV
            echo "expires=5w" >> $GITHUB_ENV
          else
            echo "branch=test-invidious" >> $GITHUB_ENV
            echo "expires=3d" >> $GITHUB_ENV
          fi
      - name: Checkout
        uses: actions/checkout@v3
        if: steps.check.outputs.skip-release != 'true'
      - name: Download source code
        if: steps.check.outputs.skip-release != 'true'
        run: |
          git config --global advice.detachedHead false
          git config --global user.email nobody@localhost
          git config --global user.name nobody
          echo "::group::Clone repo"
          git clone --revision="$INVIDIOUS_REV" https://github.com/iv-org/invidious.git invidious-src
          cd invidious-src
          git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
          git fetch --all
          echo "::endgroup::"
          echo "::group::Tag version"
          tag=$(git rev-parse HEAD)
          echo "$tag"
          mkdir -p /tmp/GAC/invidious && echo "$tag" > /tmp/GAC/invidious/version
          echo "::endgroup::"
      - name: Merge patches
        if: steps.check.outputs.skip-release != 'true'
        run: |
          cd invidious-src
          for i in $(grep -vE '^#' ../invidious/pr.list); do
            echo "::group::PR#$i"
            git merge --no-edit "origin/pr/$i"
            echo "::endgroup::"
          done
          for i in $(grep -vE '^#' ../invidious/xt.list); do
            echo "::group::$i"
            git am -3 "../invidious/patches/$i"
            echo "::endgroup::"
          done
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.check.outputs.skip-release != 'true'
      - name: Login to Quay.io
        uses: docker/login-action@v2
        if: steps.check.outputs.skip-release != 'true'
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build and push ${{ matrix.name }}
        uses: docker/build-push-action@v4
        if: steps.check.outputs.skip-release != 'true'
        with:
          context: ./invidious-src
          file: ./invidious-src/docker/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: quay.expires-after=${{ env.expires }}
          push: true
          tags: quay.io/putara/${{ env.branch }}:${{ matrix.latest }}, quay.io/putara/${{ env.branch }}:${{ matrix.prefix }}-${{ needs.prep.outputs.invidious-timestamp }}
          build-args: |
            "release=1"
            "disable_quic=1"
